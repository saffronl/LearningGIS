{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.8.5","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Vector Data I/O in Python\n\nReading data into Python is usually the first step of an analysis workflow. There are various different GIS data formats available such as [Shapefile](https://en.wikipedia.org/wiki/Shapefile), [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON), [KML](https://en.wikipedia.org/wiki/Keyhole_Markup_Language), and [GPKG](https://en.wikipedia.org/wiki/GeoPackage). [Geopandas](http://geopandas.org/io.html) is capable of reading data from all of these formats (plus many more). \n\nThis tutorial will show some typical examples how to read (and write) data from different sources. The main point in this section is to demonstrate the basic syntax for reading and writing data using short code snippets. You can find the example data sets in the data-folder. However, most of the example databases do not exists, but you can use and modify the example syntax according to your own setup.","metadata":{}},{"cell_type":"markdown","source":"## File formats\n\nIn geopandas, we use a generic function [from_file()](http://geopandas.org/reference.html#geopandas.GeoDataFrame.to_file) for reading in different data formats. In the bacground, Geopandas uses [fiona.open()](https://fiona.readthedocs.io/en/latest/fiona.html#fiona.open) when reading in data. Esri Shapefile is the default file format. For other file formats we need to specify which driver to use for reading in the data. \n\nYou can check supported through geopandas, or directly from fiona: ","metadata":{}},{"cell_type":"code","source":"import geopandas as gpd\n\n# Check supported format drivers\ngpd.io.file.fiona.drvsupport.supported_drivers\n\n# Same as:\n#import fiona\n#fiona.supported_drivers","metadata":{},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"{'AeronavFAA': 'r',\n 'ARCGEN': 'r',\n 'BNA': 'rw',\n 'DXF': 'rw',\n 'CSV': 'raw',\n 'OpenFileGDB': 'r',\n 'FlatGeobuf': 'r',\n 'ESRIJSON': 'r',\n 'ESRI Shapefile': 'raw',\n 'GeoJSON': 'raw',\n 'GeoJSONSeq': 'rw',\n 'GPKG': 'raw',\n 'GML': 'rw',\n 'OGR_GMT': 'rw',\n 'GPX': 'rw',\n 'GPSTrackMaker': 'rw',\n 'Idrisi': 'r',\n 'MapInfo File': 'raw',\n 'DGN': 'raw',\n 'PCIDSK': 'rw',\n 'OGR_PDS': 'r',\n 'S57': 'r',\n 'SEGY': 'r',\n 'SUA': 'r',\n 'TopoJSON': 'r'}"},"metadata":{}}]},{"cell_type":"markdown","source":"### Read / write Shapefile","metadata":{}},{"cell_type":"code","source":"import geopandas as gpd\n\n# Read file from Shapefile\nfp = \"data/finland_municipalities.shp\"\ndata = gpd.read_file(fp)\n\n# Write to Shapefile (just make a copy)\noutfp = \"temp/finland_municipalities.shp\"\ndata.to_file(outfp)","metadata":{"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read / write GeoJSON","metadata":{}},{"cell_type":"code","source":"# Read file from GeoJSON\nfp = \"data/finland_municipalities.gjson\"\ndata = gpd.read_file(fp, driver=\"GeoJSON\")\n\n# Write to GeoJSON (just make a copy)\noutfp = \"temp/finland_municipalities.gjson\"\ndata.to_file(outfp, driver=\"GeoJSON\")","metadata":{"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"### Read / write KML","metadata":{}},{"cell_type":"code","source":"# Enable KML driver\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\n\n# Read file from KML\nfp = \"data/finland_municipalities.kml\"\ndata = gpd.read_file(fp)\n\n# Write to KML (just make a copy)\noutfp = \"temp/finland_municipalities.kml\"\ndata.to_file(outfp, driver=\"KML\")","metadata":{"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":6,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mDriverError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-57e391911fd1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Read file from KML\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"data/finland_municipalities.kml\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Write to KML (just make a copy)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/geopandas/io/file.py\u001b[0m in \u001b[0;36m_read_file\u001b[0;34m(filename, bbox, mask, rows, **kwargs)\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mfiona_env\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_or_bytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m             \u001b[0;31m# In a future Fiona release the crs attribute of features will\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fiona/env.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    396\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    397\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlocal\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_env\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 398\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    399\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    400\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fiona/__init__.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, driver, schema, crs, encoding, layer, vfs, enabled_drivers, crs_wkt, **kwargs)\u001b[0m\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'a'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 253\u001b[0;31m             c = Collection(path, mode, driver=driver, encoding=encoding,\n\u001b[0m\u001b[1;32m    254\u001b[0m                            layer=layer, enabled_drivers=enabled_drivers, **kwargs)\n\u001b[1;32m    255\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fiona/collection.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path, mode, driver, schema, crs, encoding, layer, vsi, archive, enabled_drivers, crs_wkt, ignore_fields, ignore_geometry, **kwargs)\u001b[0m\n\u001b[1;32m    161\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 163\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mguard_driver_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    164\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    165\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"a\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/fiona/collection.py\u001b[0m in \u001b[0;36mguard_driver_mode\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    178\u001b[0m         \u001b[0mdriver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_driver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdriver\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msupported_drivers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mDriverError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"unsupported driver: %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msupported_drivers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mDriverError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"unsupported mode: %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mDriverError\u001b[0m: unsupported driver: 'LIBKML'"],"ename":"DriverError","evalue":"unsupported driver: 'LIBKML'","output_type":"error"}]},{"cell_type":"markdown","source":"### Read / write Geopackage","metadata":{}},{"cell_type":"code","source":"# Read file from Geopackage\nfp = \"data/finland_municipalities.gpkg\"\ndata = gpd.read_file(fp)\n\n# Write to Geopackage (just make a copy)\noutfp = \"temp/finland_municipalities.gpkg\"\ndata.to_file(outfp, driver=\"GPKG\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read / write GeoDatabase","metadata":{}},{"cell_type":"code","source":"# Read file from File Geodatabase\nfp = \"data/finland.gdb\"\ndata = gpd.read_file(fp, driver=\"OpenFileGDB\", layer='municipalities')\n\n# Write to same FileGDB (just add a new layer) - requires additional package installations(?)\n#outfp = \"data/finland.gdb\"\n#data.to_file(outfp, driver=\"FileGDB\", layer=\"municipalities_copy\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read / write MapInfo Tab","metadata":{}},{"cell_type":"code","source":"# Read file from MapInfo Tab\nfp = \"data/finland_municipalities.tab\"\ndata = gpd.read_file(fp, driver=\"MapInfo File\")\n\n# Write to same FileGDB (just add a new layer)\noutfp = \"temp/finland_municipalities.tab\"\ndata.to_file(outfp, driver=\"MapInfo File\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Databases\n\nExample syntax for reading and writing data from/to databases. ","metadata":{}},{"cell_type":"markdown","source":"### Read PostGIS database using psycopg2","metadata":{}},{"cell_type":"code","source":"import geopandas as gpd\nimport psycopg2\n\n# Create connection to database with psycopg2 module (update params according your db)\nconn, cursor = psycopg2.connect(dbname='my_postgis_database', \n                                user='my_usrname', \n                                password='my_pwd', \n                                host='123.22.432.16', port=5432)\n\n# Specify sql query\nsql = \"SELECT * FROM MY_TABLE;\"\n\n# Read data from PostGIS\ndata = gpd.read_postgis(sql=sql, con=conn)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read / write PostGIS database using SqlAlchemy + GeoAlchemy","metadata":{}},{"cell_type":"code","source":"from sqlalchemy.engine.url import URL\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import MetaData\nfrom sqlalchemy.orm import sessionmaker\nfrom geoalchemy2 import WKTElement, Geometry\n\n# Update with your db parameters\nHOST = '123.234.345.16'\nDB = 'my_database'\nUSER = 'my_user'\nPORT = 5432\nPWD = 'my_password'\n\n# Database info\ndb_url = URL(drivername='postgresql+psycopg2', host=HOST, database=DB,\n                   username=USER, port=PORT, password=PWD)\n\n# Create engine\nengine = create_engine(db_url)\n\n# Init Metadata\nmeta = MetaData()\n\n# Load table definitions from db\nmeta.reflect(engine)\n\n# Create session\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# ========================\n# Read data from PostGIS\n# ========================\n\n# Specify sql query\nsql = \"SELECT * FROM finland;\"\n\n# Pull the data\ndata = gpd.read_postgis(sql=sql, con=engine)\n\n# Close session\nsession.close()\n\n# =========================================\n# Write data to PostGIS (make a copy table)\n# =========================================\n\n# Coordinate Reference System (srid)\ncrs = 4326\n\n# Target table\ntarget_table = 'finland_copy'\n\n# Convert Shapely geometries to WKTElements into column 'geom' (default in PostGIS)\ndata['geom'] = data['geometry'].apply(lambda row: WKTElement(row.wkt, srid=crs))\n\n# Drop Shapely geometries\ndata = data.drop('geometry', axis=1)\n\n# Write to PostGIS (overwrite if table exists, be careful with this! )\n# Possible behavior: 'replace', 'append', 'fail'\n\ndata.to_sql(target_table, engine, if_exists='replace', index=False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Read / write Spatialite database ","metadata":{}},{"cell_type":"code","source":"import geopandas as gpd\nimport sqlite3\nimport shapely.wkb as swkb\nfrom sqlalchemy import create_engine, event\n\n# DB path\ndbfp = 'L2_data/Finland.sqlite'\n\n# Name for the table\ntbl_name = 'finland'\n\n# SRID (crs of your data)\nsrid = 4326\n\n# Parse Geometry type of the input Data\ngtype = data.geom_type.unique()\nassert len(gtype) == 1, \"Mixed Geometries! Cannot insert into SQLite table.\"\ngeom_type = gtype[0].upper()\n\n# Initialize database engine\nengine = create_engine('sqlite:///{db}'.format(db=dbfp), module=sqlite)\n\n# Initialize table without geometries\ngeo = data.drop(['geometry'], axis=1)\n\nwith sqlite3.connect(dbfp) as conn:\n    geo.to_sql(tbl_name, conn, if_exists='replace', index=False)\n\n# Enable spatialite extension    \nwith sqlite3.connect(dbfp) as conn:\n    conn.enable_load_extension(True)\n    conn.load_extension(\"mod_spatialite\")\n    conn.execute(\"SELECT InitSpatialMetaData(1);\")\n    # Add geometry column with specified CRS with defined geometry typehaving two dimensions\n    conn.execute(\n        \"SELECT AddGeometryColumn({table}, 'wkb_geometry',\\\n        {srid}, {geom_type}, 2);\".format(table=tbl_name, srid=srid, geom_type=geom_type)\n    )\n    \n# Convert Shapely geometries into well-known-binary format\ndata['geometry'] = data['geometry'].apply(lambda geom: swkb.dumps(geom))\n\n# Push to database (overwrite if table exists)\ndata.to_sql(tbl_name, engine, if_exists='replace', index=False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Read Web Feature Service (WFS)\n\nThis script was used to generate input data for this tutorial (FileGDB and tab were created separately). Source: Statistics finland WFS.","metadata":{}},{"cell_type":"code","source":"import geopandas as gpd\nimport requests\nimport geojson\nfrom pyproj import CRS\n\n# Specify the url for the backend. \n#Here we are using data from Statistics Finland: https://www.stat.fi/org/avoindata/paikkatietoaineistot_en.html. (CC BY 4.0)\nurl = 'http://geo.stat.fi/geoserver/tilastointialueet/wfs'\n\n# Specify parameters (read data in json format). \nparams = dict(service='WFS', version='2.0.0', request='GetFeature', \n         typeName='tilastointialueet:kunta4500k', outputFormat='json')\n\n# Fetch data from WFS using requests\nr = requests.get(url, params=params)\n\n# Create GeoDataFrame from geojson and set coordinate reference system\ndata = gpd.GeoDataFrame.from_features(geojson.loads(r.content),  crs=\"EPSG:3067\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prepare data for writing to various file formats\ndata = data.drop(columns=[\"bbox\"])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check crs\ndata.crs","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# filename\nlayer_name = \"finland_municipalities\"\n\n# enable writing kml\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\n\n# drivers and extensions for different file formats\ndrivers = {'ESRI Shapefile': 'shp',\n           'GeoJSON': 'gjson',\n           'KML': 'kml',\n           'GPKG': 'gpkg',\n          }\n\n# Write layer to different file formats\nfor driver, extension in drivers.items():\n    \n    # Create file path and file name\n    file_name = \"data/{0}.{1}\".format(layer_name, extension)\n    \n    # Write data using correct dricer\n    data.to_file(file_name, driver=driver)\n    print(\"Created file\", file_name)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}